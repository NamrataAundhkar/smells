[reference]
[ref-id]Fowler
[ref-text]Fowler M. Refactoring: improving the design of existing code. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.; 1999.
[ref-image]
[ref-url]http://amzn.to/2rblDm3
[ref-end]

[reference]
[ref-id]Page
[ref-text]Page-Jones M. Fundamentals of object-oriented design in UML. Addison-Wesley Professional; 1999.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Rumbaugh
[ref-text]Rumbaugh J, Blaha M, Premerlani W, Eddy F, Lorensen W. Object-oriented modeling and design. Upper Saddle River, NJ, USA: Prentice-Hall, Inc.; 1991.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Lippert
[ref-text]Lippert M, Roock S. Refactoring in large software projects: performing complex restructurings successfully. John Wiley and Sons; 2006.
[ref-image]
[ref-url]http://amzn.to/2rSdj7X
[ref-end]


[reference]
[ref-id]BlochJ
[ref-text]Bloch J. How to design a good API and why it matters. In: Companion to the 21st ACM SIGPLAN symposium on object-oriented programming systems, languages, and applications (OOPSLA ‘06); 2006.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Schader
[ref-text]Schader M, Korthaus A. The unified modeling language: technical aspects and applications. Physica; 1998.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Shalloway
[ref-text]Shalloway A, Trott JR. Design patterns explained: a new perspective on object-oriented design. Addison-Wesley; 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Van
[ref-text]Van Emden E, Moonen L. Java quality assurance by detecting code smells. In: Proceedings of the ninth working conference on reverse engineering (WCRE’02), Washington, DC, USA; 2002. p. 97.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Gil
[ref-text]Gil JY, Maman I. Micro patterns in Java code. SIGPLAN Notes October 2005;40:97–116.
[ref-image]
[ref-url]
[ref-end] 

[reference]
[ref-id]Ratzinger
[ref-text]Ratzinger J, Fischer M, Gall H. Improving evolvability through refactoring. In: Proceed- ings of the 2005 international workshop on mining software repositories, MSR ‘05, New York, NY, USA; 2005. p. 1–5.
[ref-image]
[ref-url]
[ref-end] 

 [reference]
 [ref-id]Demeyer
 [ref-text]Demeyer S, Ducasse S, Nierstrasz O. Object-oriented reengineering patterns. Morgan Kaufmann; 2002.
 [ref-image]
 [ref-url]
 [ref-end] 

[reference]
[ref-id]Page-Jones
[ref-text]Page-Jones M. The practical guide to structured systems design. 2nd ed. Prentice Hall; 1988.
[ref-image]
[ref-url]
[ref-end] 

[reference]
[ref-id]Marquardt
[ref-text]Marquardt K. Dependency structures–architectural diagnoses and therapies. In: Proc. of EuroPLoP; 2001.
[ref-image]
[ref-url]
[ref-end] 

[reference]
[ref-id]Miller
[ref-text]Miller BK. Object-oriented architecture measures. In: Proceedings of the thirty-second annual Hawaii international conference on system sciences, vol. 8. HICSS ‘99; 1999. p. 8069.
[ref-image]
[ref-url]
[ref-end] 

[reference]
[ref-id]Beyer
[ref-text]Beyer D, Lewerentz C. Crocopat: efficient pattern analysis in object-oriented programs. In: Proceedings of the 11th IEEE international workshop on program comprehension, IWPC’03, Washington, DC, USA; 2003. p. 294.
[ref-image]
[ref-url]
[ref-end] 

[reference]
[ref-id]MartinRC
[ref-text]Martin RC. Agile software development, principles, patterns, and practices. Addison-Wesley; 2003.
[ref-image]
[ref-url]http://amzn.to/2p7QazO
[ref-end]  


[reference]
[ref-id]Bloch
[ref-text]Bloch J. Effective Java. 2nd ed. Addison-Wesley; 2008.
[ref-image]
[ref-url]http://amzn.to/2pDfi2T
[ref-end]  

[reference]
[ref-id]TrifuA
[ref-text]Trifu A. Towards automated restructuring of object oriented systems [Ph.D. thesis]. Universitét Karlsruhe (TH), Fakultét fér Informatik; 2008.
[ref-image]
[ref-url]
[ref-end]  

[reference]
[ref-id]MeyerB
[ref-text]Meyer B. The many faces of inheritance: a taxonomy of taxonomy. Computer May 1996;29(5):105–8.
[ref-image]
[ref-url]
[ref-end]   

[reference]
[ref-id]Arévalo
[ref-text]Arévalo G. High-level views in object-oriented systems using formal concept analysis [Ph.D. thesis]. The University of Bern; 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Wake
[ref-text]Wake WC. Refactoring workbook. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.; 2003.
[ref-image]
[ref-url]http://amzn.to/2qjtWZx
[ref-end]

[reference]
[ref-id]Binder
[ref-text]Binder RV. Testing object-oriented systems: models, patterns, and tools. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.; 1999.
[ref-image]
[ref-url]http://amzn.to/2p7WjMu
[ref-end]

[reference]
[ref-id]MeyerB2
[ref-text]Meyer B. Touch of class: learning to program well with objects and contracts. Springer; 2009.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Arie
[ref-text]Arie Deursen, Leon M.F. Moonen, A. Bergh, and Gerard Kok, “Refactoring Test Code”, Technical Report, CWI, Amsterdam, The Netherlands, 2001
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Gerard
[ref-text]Gerard Meszaros, “xUnit Test Patterns: Refactoring Test Code”, Addison-Wesley, 2007
[ref-image]
[ref-url]http://amzn.to/2p7SA1v
[ref-end]

[reference]
[ref-id]VanR
[ref-text]Van Rompaey, Bart, et al., "On the Detection of Test Smells: A Metrics-based Approach for General Fixture and Eager Test" IEEE Transactions Software Engineering, 2007
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Michaela
[ref-text]Michaela Greiler, Arie van Deursen, Margaret-Anne Storey. Automated Detection of Test Fixture Strategies and Smells. Accepted for publication in the Proceedings of the Sixth International Conference on Software Testing, Verification and Validation, IEEE Computer Society.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Girish
[ref-text]Girish Suryanarayana, Ganesh Samarthyam, and Tushar Sharma, Refactoring for Software Design Smells: Managing Technical Debt, 1st ed. Morgan Kaufmann, 2014.
[ref-image]
[ref-url]http://bit.ly/DesignSmells
[ref-end]

[reference]
[ref-id]Tushar
[ref-text]Tushar Sharma, Marios Fragkoulis, and Diomidis Spinellis, “Does your configuration code smell?” in Proceedings of the 13th International Workshop on Mining Software Repositories, ser. MSR’16, 2016, pp. 189–200.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Riel
[ref-text]A. J. Riel, Object-Oriented Design Heuristics. Addison-Wesley, 1996.
[ref-image]
[ref-url]http://amzn.to/2qyVfz3
[ref-end]


[reference]
[ref-id]Brown
[ref-text]W. Brown, R. Malveau, H. McCormick, and T. Mowbray, AntiPatterns: Refactoring software, architectures, and projects in crisis. John Wiley & Sons, 1998.
[ref-image]<a href="https://www.amazon.com/AntiPatterns-Refactoring-Software-Architectures-Projects/dp/0471197130/ref=as_li_ss_il?s=books&ie=UTF8&qid=1493715891&sr=1-1&keywords=AntiPatterns:+Refactoring+software,+architectures,+and+projects+in+crisis&linkCode=li2&tag=croc03-20&linkId=7d20532574f897cfa0557bfd7a6bbd7c" target="_blank"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0471197130&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=croc03-20" ></a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=croc03-20&l=li2&o=1&a=0471197130" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
[ref-url]http://amzn.to/2pCSNuh
[ref-end]


[reference]
[ref-id]Joshua
[ref-text]Joshua Garcia, Daniel Popescu, George Edwards, and Nenad Medvidovic. 2009. Toward a Catalogue of Architectural Bad Smells. In Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems (QoSA '09), Raffaela Mirandola, Ian Gorton, and Christine Hofmeister (Eds.). Springer-Verlag, Berlin, Heidelberg, 146-162. DOI=http://dx.doi.org/10.1007/978-3-642-02351-4_10
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Hugo
[ref-text]Hugo Sica de Andrade, Eduardo Almeida, and Ivica Crnkovic. 2014. Architectural bad smells in software product lines: an exploratory study. In Proceedings of the WICSA 2014 Companion Volume (WICSA '14 Companion). ACM, New York, NY, USA, , Article 12 , 6 pages. DOI=http://dx.doi.org/10.1145/2578128.2578237
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Fontana
[ref-text]F. A. Fontana, I. Pigazzini, R. Roveda and M. Zanoni, "Automatic Detection of Instability Architectural Smells," 2016 IEEE International Conference on Software Maintenance and Evolution (ICSME), Raleigh, NC, 2016, pp. 433-437. doi: 10.1109/ICSME.2016.33
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Karwin
[ref-text]B. Karwin, SQL Antipatterns: Avoiding the Pitfalls of Database Programming, 1st ed. Pragmatic Bookshelf, 2010.
[ref-image]
[ref-url]http://amzn.to/2qrk7JE
[ref-end]

