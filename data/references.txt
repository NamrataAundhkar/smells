[reference]
[ref-id]Fowler
[ref-text]M. Fowler, “Refactoring: Improving the Design of Existing Code”. Addison-Wesley, 1999.
[ref-image]
[ref-url]http://amzn.to/2rblDm3
[ref-end]

[reference]
[ref-id]Page
[ref-text]M. Page-Jones, “Fundamentals of Object-Oriented Design in UML”. Addison-Wesley, 1999.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Rumbaugh
[ref-text]J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, W. Lorensen, “Object-Oriented Modeling and Design”. Prentice-Hall, 1991.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Lippert
[ref-text]M. Lippert, S. Roock, “Refactoring in Large Software Projects: Performing Complex Restructurings Successfully”. John Wiley and Sons, 2006.
[ref-image]
[ref-url]http://amzn.to/2rSdj7X
[ref-end]


[reference]
[ref-id]BlochJ
[ref-text]J. Bloch, “How to Design a Good API and Why It Matters”. OOPSLA Companion, 2006.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Schader
[ref-text]M. Schader, A. Korthaus, “The Unified Modeling Language: Technical Aspects and Applications”. Physica, 1998.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Shalloway
[ref-text]A. Shalloway, J. R. Trott, “Design Patterns Explained: A New Perspective on Object-Oriented Design”. Addison-Wesley, 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Van
[ref-text]E. van Emden, Moonen, “Java Quality Assurance by Detecting Code Smells”. WCRE 2002, pp. 97–108.
[ref-image]
[ref-url]http://bibtex.github.io/WCRE-2002-EmdenM.html
[ref-end]


[reference]
[ref-id]Gil
[ref-text]J. Y. Gil, I. Maman, “Micro Patterns in Java Code”. OOPSLA 2005, pp. 97–116.
[ref-image]
[ref-url]http://bibtex.github.io/OOPSLA-2005-GilM.html
[ref-end]

[reference]
[ref-id]Ratzinger
[ref-text]J. Ratzinger, M. Fischer, H. Gall, “Improving Evolvability through Refactoring”. MSR 2005. pp. 96–100.
[ref-image]
[ref-url]http://bibtex.github.io/MSR-2005-RatzingerFG.html
[ref-end]

 [reference]
 [ref-id]Demeyer
 [ref-text]S. Demeyer, S. Ducasse, O. Nierstrasz, “Object-Oriented Reengineering Patterns”. Morgan Kaufmann, 2002.
 [ref-image]
 [ref-url]
 [ref-end]

[reference]
[ref-id]Page-Jones
[ref-text]M. Page-Jones, “The Practical Guide to Structured Systems Design”. Prentice Hall, 1988. Second Edition.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Marquardt
[ref-text]K. Marquardt, “Dependency Structures: Architectural Diagnoses and Therapies”. EuroPLoP 2001.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Miller
[ref-text]B. K. Miller, “Object-Oriented Architecture Measures”. HICSS 1999, vol. 8, p. 8069.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Beyer
[ref-text]D. Beyer, C. Lewerentz, “CrocoPat: Efficient Pattern Analysis in Object-Oriented Programs”. IWPC 2003, pp. 294–295.
[ref-image]
[ref-url]http://bibtex.github.io/IWPC-2003-BeyerL.html
[ref-end]

[reference]
[ref-id]MartinRC
[ref-text]R. C. Martin, “Agile Software Development: Principles, Patterns, and Practices”. Addison-Wesley, 2003.
[ref-image]
[ref-url]http://amzn.to/2p7QazO
[ref-end]


[reference]
[ref-id]Bloch
[ref-text]J. Bloch, “Effective Java”. Addison-Wesley, 2008. Second Edition.
[ref-image]
[ref-url]http://amzn.to/2pDfi2T
[ref-end]

[reference]
[ref-id]TrifuA
[ref-text]A. Trifu, “Towards Automated Restructuring of Object-Oriented Systems”. PhD thesis, Universitét Karlsruhe, Fakultét fér Informatik, 2008.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]MeyerB
[ref-text]B. Meyer, “The Many Faces of Inheritance: A Taxonomy of Taxonomy”. Computer 29(5):105–8, 1996.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Arévalo
[ref-text]G. Arévalo, “High-Level Views in Object-Oriented Systems Using Formal Concept Analysis”. PhD thesis, The University of Bern, 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Wake
[ref-text]W. C. Wake, “Refactoring Workbook”. Addison-Wesley, 2003.
[ref-image]
[ref-url]http://amzn.to/2qjtWZx
[ref-end]

[reference]
[ref-id]Binder
[ref-text]R. V. Binder, “Testing Object-Oriented Systems: Models, Patterns, and Tools”. Addison-Wesley, 1999.
[ref-image]
[ref-url]http://amzn.to/2p7WjMu
[ref-end]

[reference]
[ref-id]MeyerB2
[ref-text]B. Meyer, “Touch of Class: Learning to Program Well with Objects and Contracts”. Springer, 2009.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Arie
[ref-text]A. van Deursen, L. Moonen, A. Bergh, G. Kok, “Refactoring Test Code”, Technical Report, CWI, 2001.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Gerard
[ref-text]G. Meszaros, “xUnit Test Patterns: Refactoring Test Code”, Addison-Wesley, 2007.
[ref-image]
[ref-url]http://amzn.to/2p7SA1v
[ref-end]

[reference]
[ref-id]VanR
[ref-text]B. Van Rompaey, B. Du Bois, S. Demeyer, M. Rieger, “On the Detection of Test Smells: A Metrics-Based Approach for General Fixture and Eager Test”. IEEE TSE 33(12):800–817, 2007.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Michaela
[ref-text]M. Greiler, A. van Deursen, M.-A. D. Storey, “Automated Detection of Test Fixture Strategies and Smells”. ICST 2013, pp. 322–331.
[ref-image]
[ref-url]http://bibtex.github.io/ICST-2013-GreilerDS.html
[ref-end]

[reference]
[ref-id]Girish
[ref-text]G. Suryanarayana, G. Samarthyam, T. Sharma, “Refactoring for Software Design Smells: Managing Technical Debt”. Morgan Kaufmann, 2014.
[ref-image]
[ref-url]http://bit.ly/DesignSmells
[ref-end]

[reference]
[ref-id]Tushar
[ref-text]T. Sharma, M. Fragkoulis, D. Spinellis, “Does Your Configuration Code Smell?”. MSR 2016, pp. 189–200.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Riel
[ref-text]A. J. Riel, “Object-Oriented Design Heuristics”. Addison-Wesley, 1996.
[ref-image]
[ref-url]http://amzn.to/2qyVfz3
[ref-end]


[reference]
[ref-id]Brown
[ref-text]W. Brown, R. Malveau, H. McCormick, T. Mowbray, “AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis”. John Wiley & Sons, 1998.
[ref-image]<a href="https://www.amazon.com/AntiPatterns-Refactoring-Software-Architectures-Projects/dp/0471197130/ref=as_li_ss_il?s=books&ie=UTF8&qid=1493715891&sr=1-1&keywords=AntiPatterns:+Refactoring+software,+architectures,+and+projects+in+crisis&linkCode=li2&tag=croc03-20&linkId=7d20532574f897cfa0557bfd7a6bbd7c" target="_blank"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0471197130&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=croc03-20" ></a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=croc03-20&l=li2&o=1&a=0471197130" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
[ref-url]http://amzn.to/2pCSNuh
[ref-end]


[reference]
[ref-id]Joshua
[ref-text]J. Garcia, D. Popescu, G. Edwards, N. Medvidovic, “Toward a Catalogue of Architectural Bad Smells”. QoSA 2009, pp. 146-162.
[ref-image]
[ref-url]http://bibtex.github.io/QoSA-2009-GarciaPEM.html
[ref-end]

[reference]
[ref-id]Hugo
[ref-text]H. Sica de Andrade, E. Almeida, I. Crnkovic. 2014. “Architectural Bad Smells In Software Product Lines: An Exploratory Study”. WICSA 2014 Companion, Article 12.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Fontana
[ref-text]F. A. Fontana, I. Pigazzini, R. Roveda, M. Zanoni, “Automatic Detection of Instability Architectural Smells”. ICSME 2016, pp. 433-437.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Karwin
[ref-text]B. Karwin, “SQL Antipatterns: Avoiding the Pitfalls of Database Programming”. Pragmatic Bookshelf, 2010.
[ref-image]
[ref-url]http://amzn.to/2qrk7JE
[ref-end]

[reference]
[ref-id]Felienne2012
[ref-text]F. Hermans, M. Pinzger, A. van Deursen. “Detecting Code Smells in Spreadsheet Formulas”. ICSM 2012, pp. 409–418.
[ref-image]
[ref-url]http://bibtex.github.io/ICSM-2012-HermansPD.html
[ref-end]

[reference]
[ref-id]Felienne2012b
[ref-text]F. Hermans, M. Pinzger, A. van Deursen, “Detecting and Visualizing Inter-Worksheet Smells in Spreadsheets”. ICSE 2012, pp. 441–451.
[ref-image]
[ref-url]http://bibtex.github.io/ICSE-2012-HermansPD.html
[ref-end]

[reference]
[ref-id]TusharPPT
[ref-text]T. Sharma, “Presentation Smells: How Not to Prepare Your Conference Presentation”. 2016.
[ref-image]
[ref-url]http://www.tusharma.in/smells/presentation-smells/
[ref-end]

[reference]
[ref-id]Antonio
[ref-text]A. Vetro, L. Ardito, G. Procaccianti, M. Morisio, “Definition, Implementation and Validation of Energy Code Smells: An Exploratory Study on an Embedded System”. ENERGY 2013, pp. 34-39.
[ref-image]
[ref-url]http://porto.polito.it/2506419/1/paper_camera_ready.pdf
[ref-end]

[reference]
[ref-id]Smith
[ref-text]C. U. Smith, L. G. Williams. “Software performance antipatterns”. WOSP 2000, pp. 127-136.
[ref-image]
[ref-url]http://dx.doi.org/10.1145/350391.350420
[ref-end]

[reference]
[ref-id]Mo
[ref-text]R. Mo, Y. Cai, R. Kazman, L. Xiao. “Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells”. WICSA 2015, pp. 51–60.
[ref-image]
[ref-url]http://bibtex.github.io/WICSA-2015-MoCKX.html
[ref-end]
