[reference]
[ref-id]Fowler
[ref-text]M. Fowler, “Refactoring: Improving the Design of Existing Code”. Addison-Wesley, 1999.
[ref-image]
[ref-url]http://amzn.to/2rblDm3
[ref-end]

[reference]
[ref-id]Page
[ref-text]M. Page-Jones, “Fundamentals of Object-Oriented Design in UML”. Addison-Wesley, 1999.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Rumbaugh
[ref-text]J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, W. Lorensen, “Object-Oriented Modeling and Design”. Prentice-Hall, 1991.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Lippert
[ref-text]M. Lippert, S. Roock, “Refactoring in Large Software Projects: Performing Complex Restructurings Successfully”. John Wiley and Sons, 2006.
[ref-image]
[ref-url]http://amzn.to/2rSdj7X
[ref-end]


[reference]
[ref-id]BlochJ
[ref-text]J. Bloch, “How to Design a Good API and Why It Matters”. OOPSLA Companion, 2006.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Schader
[ref-text]M. Schader, A. Korthaus, “The Unified Modeling Language: Technical Aspects and Applications”. Physica, 1998.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Shalloway
[ref-text]A. Shalloway, J. R. Trott, “Design Patterns Explained: A New Perspective on Object-Oriented Design”. Addison-Wesley, 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Van
[ref-text]E. van Emden, Moonen, “Java Quality Assurance by Detecting Code Smells”. WCRE 2002, pp. 97–108.
[ref-image]
[ref-url]http://bibtex.github.io/WCRE-2002-EmdenM.html
[ref-end]


[reference]
[ref-id]Gil
[ref-text]J. Y. Gil, I. Maman, “Micro Patterns in Java Code”. OOPSLA 2005, pp. 97–116.
[ref-image]
[ref-url]http://bibtex.github.io/OOPSLA-2005-GilM.html
[ref-end]

[reference]
[ref-id]Ratzinger
[ref-text]J. Ratzinger, M. Fischer, H. Gall, “Improving Evolvability through Refactoring”. MSR 2005. pp. 96–100.
[ref-image]
[ref-url]http://bibtex.github.io/MSR-2005-RatzingerFG.html
[ref-end]

 [reference]
 [ref-id]Demeyer
 [ref-text]S. Demeyer, S. Ducasse, O. Nierstrasz, “Object-Oriented Reengineering Patterns”. Morgan Kaufmann, 2002.
 [ref-image]
 [ref-url]
 [ref-end]

[reference]
[ref-id]Page-Jones
[ref-text]M. Page-Jones, “The Practical Guide to Structured Systems Design”. Prentice Hall, 1988. Second Edition.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Marquardt
[ref-text]K. Marquardt, “Dependency Structures: Architectural Diagnoses and Therapies”. EuroPLoP 2001.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Miller
[ref-text]B. K. Miller, “Object-Oriented Architecture Measures”. HICSS 1999, vol. 8, p. 8069.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Beyer
[ref-text]D. Beyer, C. Lewerentz, “CrocoPat: Efficient Pattern Analysis in Object-Oriented Programs”. IWPC 2003, pp. 294–295.
[ref-image]
[ref-url]http://bibtex.github.io/IWPC-2003-BeyerL.html
[ref-end]

[reference]
[ref-id]MartinRC
[ref-text]R. C. Martin, “Agile Software Development: Principles, Patterns, and Practices”. Addison-Wesley, 2003.
[ref-image]
[ref-url]http://amzn.to/2p7QazO
[ref-end]


[reference]
[ref-id]Bloch
[ref-text]J. Bloch, “Effective Java”. Addison-Wesley, 2008. Second Edition.
[ref-image]
[ref-url]http://amzn.to/2pDfi2T
[ref-end]

[reference]
[ref-id]TrifuA
[ref-text]A. Trifu, “Towards Automated Restructuring of Object-Oriented Systems”. PhD thesis, Universitét Karlsruhe, Fakultét fér Informatik, 2008.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]MeyerB
[ref-text]B. Meyer, “The Many Faces of Inheritance: A Taxonomy of Taxonomy”. Computer 29(5):105–8, 1996.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Arévalo
[ref-text]G. Arévalo, “High-Level Views in Object-Oriented Systems Using Formal Concept Analysis”. PhD thesis, The University of Bern, 2004.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Wake
[ref-text]W. C. Wake, “Refactoring Workbook”. Addison-Wesley, 2003.
[ref-image]
[ref-url]http://amzn.to/2qjtWZx
[ref-end]

[reference]
[ref-id]Binder
[ref-text]R. V. Binder, “Testing Object-Oriented Systems: Models, Patterns, and Tools”. Addison-Wesley, 1999.
[ref-image]
[ref-url]http://amzn.to/2p7WjMu
[ref-end]

[reference]
[ref-id]MeyerB2
[ref-text]B. Meyer, “Touch of Class: Learning to Program Well with Objects and Contracts”. Springer, 2009.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Arie
[ref-text]A. van Deursen, L. Moonen, A. Bergh, G. Kok, “Refactoring Test Code”, Technical Report, CWI, 2001.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Gerard
[ref-text]G. Meszaros, “xUnit Test Patterns: Refactoring Test Code”, Addison-Wesley, 2007.
[ref-image]
[ref-url]http://amzn.to/2p7SA1v
[ref-end]

[reference]
[ref-id]VanR
[ref-text]B. Van Rompaey, B. Du Bois, S. Demeyer, M. Rieger, “On the Detection of Test Smells: A Metrics-Based Approach for General Fixture and Eager Test”. IEEE TSE 33(12):800–817, 2007.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Michaela
[ref-text]M. Greiler, A. van Deursen, M.-A. D. Storey, “Automated Detection of Test Fixture Strategies and Smells”. ICST 2013, pp. 322–331.
[ref-image]
[ref-url]http://bibtex.github.io/ICST-2013-GreilerDS.html
[ref-end]

[reference]
[ref-id]Girish
[ref-text]G. Suryanarayana, G. Samarthyam, T. Sharma, “Refactoring for Software Design Smells: Managing Technical Debt”. Morgan Kaufmann, 2014.
[ref-image]
[ref-url]http://bit.ly/DesignSmells
[ref-end]

[reference]
[ref-id]Tushar
[ref-text]T. Sharma, M. Fragkoulis, D. Spinellis, “Does Your Configuration Code Smell?”. MSR 2016, pp. 189–200.
[ref-image]
[ref-url]
[ref-end]


[reference]
[ref-id]Riel
[ref-text]A. J. Riel, “Object-Oriented Design Heuristics”. Addison-Wesley, 1996.
[ref-image]
[ref-url]http://amzn.to/2qyVfz3
[ref-end]


[reference]
[ref-id]Brown
[ref-text]W. Brown, R. Malveau, H. McCormick, T. Mowbray, “AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis”. John Wiley & Sons, 1998.
[ref-image]<a href="https://www.amazon.com/AntiPatterns-Refactoring-Software-Architectures-Projects/dp/0471197130/ref=as_li_ss_il?s=books&ie=UTF8&qid=1493715891&sr=1-1&keywords=AntiPatterns:+Refactoring+software,+architectures,+and+projects+in+crisis&linkCode=li2&tag=croc03-20&linkId=7d20532574f897cfa0557bfd7a6bbd7c" target="_blank"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0471197130&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=croc03-20" ></a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=croc03-20&l=li2&o=1&a=0471197130" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
[ref-url]http://amzn.to/2pCSNuh
[ref-end]


[reference]
[ref-id]Joshua
[ref-text]J. Garcia, D. Popescu, G. Edwards, N. Medvidovic, “Toward a Catalogue of Architectural Bad Smells”. QoSA 2009, pp. 146-162.
[ref-image]
[ref-url]http://bibtex.github.io/QoSA-2009-GarciaPEM.html
[ref-end]

[reference]
[ref-id]Hugo
[ref-text]H. Sica de Andrade, E. Almeida, I. Crnkovic. 2014. “Architectural Bad Smells In Software Product Lines: An Exploratory Study”. WICSA 2014 Companion, Article 12.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Fontana
[ref-text]F. A. Fontana, I. Pigazzini, R. Roveda, M. Zanoni, “Automatic Detection of Instability Architectural Smells”. ICSME 2016, pp. 433-437.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Karwin
[ref-text]B. Karwin, “SQL Antipatterns: Avoiding the Pitfalls of Database Programming”. Pragmatic Bookshelf, 2010.
[ref-image]
[ref-url]http://amzn.to/2qrk7JE
[ref-end]

[reference]
[ref-id]Felienne2012
[ref-text]F. Hermans, M. Pinzger, A. van Deursen. “Detecting Code Smells in Spreadsheet Formulas”. ICSM 2012, pp. 409–418.
[ref-image]
[ref-url]http://bibtex.github.io/ICSM-2012-HermansPD.html
[ref-end]

[reference]
[ref-id]Felienne2012b
[ref-text]F. Hermans, M. Pinzger, A. van Deursen, “Detecting and Visualizing Inter-Worksheet Smells in Spreadsheets”. ICSE 2012, pp. 441–451.
[ref-image]
[ref-url]http://bibtex.github.io/ICSE-2012-HermansPD.html
[ref-end]

[reference]
[ref-id]TusharPPT
[ref-text]T. Sharma, “Presentation Smells: How Not to Prepare Your Conference Presentation”. 2016.
[ref-image]
[ref-url]http://www.tusharma.in/smells/presentation-smells/
[ref-end]

[reference]
[ref-id]Antonio
[ref-text]A. Vetro, L. Ardito, G. Procaccianti, M. Morisio, “Definition, Implementation and Validation of Energy Code Smells: An Exploratory Study on an Embedded System”. ENERGY 2013, pp. 34-39.
[ref-image]
[ref-url]http://porto.polito.it/2506419/1/paper_camera_ready.pdf
[ref-end]

[reference]
[ref-id]Smith
[ref-text]C. U. Smith, L. G. Williams. “Software performance antipatterns”. WOSP 2000, pp. 127-136.
[ref-image]
[ref-url]http://dx.doi.org/10.1145/350391.350420
[ref-end]

[reference]
[ref-id]Mo
[ref-text]R. Mo, Y. Cai, R. Kazman, L. Xiao. “Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells”. WICSA 2015, pp. 51–60.
[ref-image]
[ref-url]http://bibtex.github.io/WICSA-2015-MoCKX.html
[ref-end]

[reference]
[ref-id]Redgate
[ref-text]Redgate, “119 SQL Code Smells,” 2017.
[ref-image]
[ref-url]http://assets.red-gate.com/community/books/sql-code-smells.pdf
[ref-end]


[reference]
[ref-id]Jaafar2013
[ref-text]Jaafar, F., Guéhéneuc, Y.-G., Hamel, S., & Khomh, F. (2013). Mining the relationship between anti-patterns dependencies and fault-proneness (pp. 351–360). Presented at the Proceedings - Working Conference on Reverse Engineering, WCRE, IEEE.
[ref-image]
[ref-url]http://doi.org/10.1109/WCRE.2013.6671310
[ref-end]

[reference]
[ref-id]Naouel2007
[ref-text]Moha, N., & Guéhéneuc, Y.-G. (2007). Decor: a tool for the detection of design defects (pp. 527–528). Presented at the ASE '07: Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering, New York, USA: ACM.
[ref-image]
[ref-url]http://doi.org/10.1145/1321631.1321727
[ref-end]

[reference]
[ref-id]Aiko2014
[ref-text]Yamashita, A. (2014). Assessing the capability of code smells to explain maintenance problems: an empirical study combining quantitative and qualitative data. Empirical Software Engineering, 19(4), 1111–1143.
[ref-image]
[ref-url]http://doi.org/10.1007/s10664-013-9250-3
[ref-end]

[reference]
[ref-id]Foutse2011
[ref-text]Khomh, F., Vaucher, S., Guéhéneuc, Y.-G., & Sahraoui, H. (2011). BDTEX: A GQM-based Bayesian approach for the detection of antipatterns. Journal of Systems and Software (Vol. 84, pp. 559–572)
[ref-image]
[ref-url]http://doi.org/10.1016/j.jss.2010.11.921
[ref-end]

[reference]
[ref-id]Yasser2016
[ref-text]Khan, Y. A., & El-Attar, M. (2016). Using model transformation to refactor use case models based on antipatterns. Information Systems Frontiers, 18(1), 171–204.
[ref-image]
[ref-url]http://doi.org/10.1007/s10796-014-9528-z
[ref-end]

[reference]
[ref-id]Naouel2010
[ref-text]Moha, N., Guéhéneuc, Y.-G., Duchien, L., & Le Meur, A.-F. (2010). DECOR: A Method for the Specification and Detection of Code and Design Smells. IEEE Transactions of Software Eng., 36(1), 20–36.
[ref-image]
[ref-url]http://doi.org/10.1109/TSE.2009.50
[ref-end]

[reference]
[ref-id]Ralph2012
[ref-text]Peters, R., & Zaidman, A. (2012). Evaluating the Lifespan of Code Smells using Software Repository Mining (pp. 411–416). Presented at the 2012 16th European Conference on Software Maintenance and Reengineering (CSMR), IEEE.
[ref-image]
[ref-url]http://doi.org/10.1109/CSMR.2012.79
[ref-end]

[reference]
[ref-id]Rahma2011
[ref-text]Fourati, R., Bouassida, N., & Abdallah, H. B. (2011). A Metric-Based Approach for Anti-pattern Detection in UML Designs. In Computer and Information Science 2011 (Vol. 364, pp. 17–33). Berlin, Heidelberg: Springer Berlin Heidelberg.
[ref-image]
[ref-url]http://doi.org/10.1007/978-3-642-21378-6_2
[ref-end]

[reference]
[ref-id]Venera2013
[ref-text]Arnaoudova, V., Di Penta, M., Antoniol, G., & Guéhéneuc, Y.-G. (2013). A New Family of Software Anti-patterns: Linguistic Anti-patterns (pp. 187–196). Presented at the CSMR '13: Proceedings of the 2013 17th European Conference on Software Maintenance and Reengineering, IEEE Computer Society.
[ref-image]
[ref-url]http://doi.org/10.1109/CSMR.2013.28
[ref-end]

[reference]
[ref-id]Emden2002
[ref-text]AE. van Emden and L. Moonen, "Assuring software quality by code smell detection," 2012 19th Working Conference on Reverse Engineering, Kingston, ON, 2012.
[ref-image]
[ref-url]http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6385092&isnumber=6385088
[ref-end]

[reference]
[ref-id]Javier2009
[ref-text]Pérez, J., & Crespo, Y. (2009). Perspectives on automated correction of bad smells (pp. 99–108). Presented at the the joint international and annual ERCIM workshops, New York, New York, USA: ACM Press.
[ref-image]
[ref-url]http://doi.org/10.1145/1595808.1595827
[ref-end]

[reference]
[ref-id]Catherine2012
[ref-text]Roussey, C., Corcho, O., Svab-Zamazal, O., Scharffe, F., & Bernard, S. (2012). SPARQL-DL queries for antipattern detection (Vol. 929, pp. 85–96). Presented at the WOP'12: Proceedings of the 3rd International Conference on Ontology Patterns - Volume 929, CEUR-WS.org.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Leonardo2016
[ref-text]da Silva Sousa, L. (2016). Spotting design problems with smell agglomerations (pp. 863–866). Presented at the ICSE '16: Proceedings of the 38th International Conference on Software Engineering Companion, New York, New York, USA: ACM.
[ref-image]
[ref-url]http://doi.org/10.1145/2889160.2889273
[ref-end]

[reference]
[ref-id]Vittorio2014
[ref-text]Cortellessa, V., Di Marco, A., & Trubiani, C. (2014). An approach for modeling and detecting software performance antipatterns based on first-order logics. Software and Systems Modeling (SoSyM), 13(1), 391–432.
[ref-image]
[ref-url]http://doi.org/10.1007/s10270-012-0246-z
[ref-end]

[reference]
[ref-id]Abdou2012
[ref-text]Maiga, A., Ali, N., Bhattacharya, N., Sabané, A., Guéhéneuc, Y.-G., Antoniol, G., & Aïmeur, E. (2012). Support vector machines for anti-pattern detection (pp. 278–281). Presented at the ASE 2012: Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, New York, New York, USA: ACM.
[ref-image]
[ref-url]http://doi.org/10.1145/2351676.2351723
[ref-end]

[reference]
[ref-id]Vibhu2014
[ref-text]Sharma, V. S., & Anwer, S. (2014). Performance antipatterns: Detection and evaluation of their effects in the cloud (pp. 758–765). Presented at the Proceedings - 2014 IEEE International Conference on Services Computing, SCC 2014, IEEE.
[ref-image]
[ref-url]http://doi.org/10.1109/SCC.2014.103
[ref-end]

[reference]
[ref-id]Smith03
[ref-text]Smith, C. U., & Williams, L. G. (2003). More new software performance antipatterns: Even more ways to shoot yourself in the foot. Computer Measurement Group Conference.
[ref-image]
[ref-url]
[ref-end]

[reference]
[ref-id]Mats2017
[ref-text]Mats Stijlaart and Vadim Zaytsev. 2017. Towards a taxonomy of grammar smells. In Proceedings of the 10th ACM SIGPLAN International Conference on Software Language Engineering (SLE 2017). ACM, New York, NY, USA, 43-54.
[ref-image]
[ref-url]https://doi.org/10.1145/3136014.3136035
[ref-end]

[reference]
[ref-id]Tushar2017
[ref-text]Tushar Sharma, Marios Fragkoulis, and Diomidis Spinellis. “House of Cards: Code Smells in Open-Source C# Repositories. in ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). 424-429. 10.1109/ESEM.2017.57.
[ref-image]
[ref-url]http://ieeexplore.ieee.org/document/8170129/
[ref-end]